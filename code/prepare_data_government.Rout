
R version 4.1.0 (2021-05-18) -- "Camp Pontanezen"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## Script to extend and further clean candidate data
> # Load dependencies
> library(tidyverse)
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──
✔ ggplot2 3.3.5     ✔ purrr   0.3.4
✔ tibble  3.1.5     ✔ dplyr   1.0.7
✔ tidyr   1.1.4     ✔ stringr 1.4.0
✔ readr   2.0.2     ✔ forcats 0.5.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
> library(rio)
> library(lubridate)

Attaching package: ‘lubridate’

The following objects are masked from ‘package:base’:

    date, intersect, setdiff, union

> library(lfe)
Loading required package: Matrix

Attaching package: ‘Matrix’

The following objects are masked from ‘package:tidyr’:

    expand, pack, unpack

> library(devtools)
Loading required package: usethis
> library(stringr)
> source_url("https://raw.githubusercontent.com/tobiasnowacki/RTemplates/master/plottheme.R")
ℹ SHA-1 hash of file is 24d50dc41518460caa7dd1e4f46697f9eb053e29
Registering fonts with R
Loading required package: viridisLite
> 
> source("code/0_functions.R")
ℹ SHA-1 hash of file is 24d50dc41518460caa7dd1e4f46697f9eb053e29
> 
> # ---------
> # LOAD DATA
> # ---------
> 
> d_orig <- import("data/eggers_spirling/elections.csv")
> 
> # List of government intervals
> govlist <- read_csv("data/19c_governments.csv") %>% 
+   rename(govt_party = party) %>%
+   dplyr::select(date_from, date_to, govt_party) %>%
+   mutate(span = interval(dmy(date_from), dmy(date_to)))
Rows: 21 Columns: 5
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (3): date_from, date_to, party
dbl (2): year_from, year_to

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> # List of candidates running
> cand_cab <- read.csv("output/mod_data/candidates_stats.csv")
> 
> # ----------------
> # CLEAN DATA
> # ----------------
> 
> # Add attempt number
> cand_cab <- cand_cab %>%
+     group_by(name) %>%
+     arrange(year) %>%
+     mutate(attempt = row_number())
> 
> # Remove candidates with multiple candidacies in one year
> mult <- cand_cab %>%
+   group_by(name) %>%
+   arrange(year) %>%
+   summarise(multiple = sum(lead(year) == year, na.rm = TRUE)) %>%
+   arrange(-multiple) %>%
+   filter(multiple > 0, na.rm = TRUE)
> 
> cand_cab <- cand_cab %>% 
+   filter(!(name %in% mult$name))
> 
> cand_cab <- cand_cab %>%
+    # pruned party indicator (either C/L or nothing) 
+   mutate(party_pruned = ifelse(party %in% c("C", "L"), party, NA)) %>%
+   filter(year <= 1929)
> 
> # Flag cands who ever switched (between two major parties)
> cand_cab <- cand_cab %>%
+   group_by(name) %>%
+   mutate(mp_switch = length(unique(party_pruned)) > 1,
+          mp_switch_between = length(unique(party_pruned[!is.na(party_pruned)])) > 1,
+          ever_elected = sum(winner == 1) > 0)
> 
> # Merge with government party
> pty <- c("C", "L")
> elecs2 <- d_orig %>%
+   mutate(date = as.Date(date),
+     year = year(date)) %>%
+   filter(date > as.Date("1800-01-01") & date < as.Date("1930-01-01")) %>%
+   mutate(year = ifelse(date == as.Date("1910-12-03"), 1911, year)) %>%
+   filter(by_election == 0)
> 
> # Create helper dataframe w/ GE dates & elected gov't
> ge_tibble <- unique(elecs2 %>% dplyr::select(year, date)) %>%
+   mutate(
+       date_end = lead(date),
+       inter = interval(date, date_end),
+       p_l = "L",
+       p_c = "C"
+   ) %>%
+   pivot_longer(p_l:p_c, values_to = "party") %>%
+   dplyr::select(-name) %>%
+   rowwise() %>%
+   mutate(
+       is_govt = check_govt_status(inter, party)
+   ) %>%
+   dplyr::select(year, party, is_govt) %>%
+   filter(year < 1918)
> 
> # Join into candidate data
> cand_cab_final <- cand_cab %>% 
+   left_join(ge_tibble) 
Joining, by = c("year", "party")
> 
> # Export
> write_csv(cand_cab_final, "output/mod_data/candidates_cabinet.csv")
> 
> proc.time()
   user  system elapsed 
  6.301   0.534   7.108 
