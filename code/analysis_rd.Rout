
R version 4.1.0 (2021-05-18) -- "Camp Pontanezen"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### DEPENDENCIES
> 
> pkgs <- c(
+   "tidyverse",
+   "rio",
+   "lubridate",
+   "devtools",
+   "rdrobust"
+ )
> lapply(pkgs, library, character.only = TRUE, quietly = TRUE)
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──
✔ ggplot2 3.3.5     ✔ purrr   0.3.4
✔ tibble  3.1.5     ✔ dplyr   1.0.7
✔ tidyr   1.1.4     ✔ stringr 1.4.0
✔ readr   2.0.2     ✔ forcats 0.5.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()

Attaching package: ‘lubridate’

The following objects are masked from ‘package:base’:

    date, intersect, setdiff, union

[[1]]
 [1] "forcats"   "stringr"   "dplyr"     "purrr"     "readr"     "tidyr"    
 [7] "tibble"    "ggplot2"   "tidyverse" "stats"     "graphics"  "grDevices"
[13] "utils"     "datasets"  "methods"   "base"     

[[2]]
 [1] "rio"       "forcats"   "stringr"   "dplyr"     "purrr"     "readr"    
 [7] "tidyr"     "tibble"    "ggplot2"   "tidyverse" "stats"     "graphics" 
[13] "grDevices" "utils"     "datasets"  "methods"   "base"     

[[3]]
 [1] "lubridate" "rio"       "forcats"   "stringr"   "dplyr"     "purrr"    
 [7] "readr"     "tidyr"     "tibble"    "ggplot2"   "tidyverse" "stats"    
[13] "graphics"  "grDevices" "utils"     "datasets"  "methods"   "base"     

[[4]]
 [1] "devtools"  "usethis"   "lubridate" "rio"       "forcats"   "stringr"  
 [7] "dplyr"     "purrr"     "readr"     "tidyr"     "tibble"    "ggplot2"  
[13] "tidyverse" "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[19] "methods"   "base"     

[[5]]
 [1] "rdrobust"  "devtools"  "usethis"   "lubridate" "rio"       "forcats"  
 [7] "stringr"   "dplyr"     "purrr"     "readr"     "tidyr"     "tibble"   
[13] "ggplot2"   "tidyverse" "stats"     "graphics"  "grDevices" "utils"    
[19] "datasets"  "methods"   "base"     

> library(kableExtra)

Attaching package: ‘kableExtra’

The following object is masked from ‘package:dplyr’:

    group_rows

> source_url("https://raw.githubusercontent.com/tobiasnowacki/RTemplates/master/plottheme.R")
ℹ SHA-1 hash of file is 24d50dc41518460caa7dd1e4f46697f9eb053e29
Registering fonts with R
Loading required package: viridisLite
> 
> ## ----------
> ## LOAD DATA
> ## ----------
> 
> returns <- import("output/mod_data/candidates_cabinet.csv")
> # cand_mg <- import("old/output/candidates_new.csv") # still relevant?
> ge_dates <- unique(returns$year)
> 
> # Function to estimate RD
> estimate_rd <- function(interval, data = rdd_df, poly = 1, plot_ready = TRUE) {
+   data <- data %>%
+     filter(year >= interval[1] & year <= interval[2]) %>%
+     ungroup()
+   out_cand <- rdrobust(y = data$again, x = data$running, p = poly)
+   out_win <- rdrobust(y = data$win_fut, x = data$running, p = poly)
+   # out_share <- rdrobust(y = data$vote_fut, x = data$running)
+   # out_fitted <- rdrobust(y = data$fitted4, x = data$fitted4)
+   out_unopp <- rdrobust(y = data$unopp_fut, x = data$running, p = poly)
+   results_list <- list(
+     out_cand, out_win,
+     # out_share, out_fitted,
+     out_unopp
+   )
+   names(results_list) <- c(
+     "Running in t+1", "Winning in t+1",
+     # "Share", "Chat",
+     "Unopposed"
+   )
+   if (plot_ready != TRUE) {
+     return(results_list)
+   }
+   outdf <- map_dfr(results_list, ~ tibble(
+     estimate = .x$coef[1, 1],
+     stderr = .x$se[3, 1],
+     ci_lower = .x$ci[3, 1],
+     ci_upper = .x$ci[3, 2],
+     obs = .x$N[1] + .x$N[2],
+     bwl = .x$bws[1, 1],
+     bwr = .x$bws[1, 2]
+   ),
+   .id = "Outcome"
+   )
+   return(outdf)
+ }
> 
> # Function to get automated election intervals
> create_intervals <- function(vec, inter) {
+   interval_list <- list()
+   for (j in 1:length(vec)) {
+     upper_bound <- ifelse(j + inter > length(vec) - 1,
+       valid <- 0, valid <- 1
+     )
+     if (valid == 1) {
+       name_vec <- paste0(vec[j], " - ", vec[j + inter])
+       interval_list[[name_vec]] <- c(vec[j], vec[j + inter]) %>% as.numeric()
+     }
+   }
+   return(interval_list)
+ }
> 
> ## ----
> ## PREPARE DATA
> ## ----
> 
> rdd_df <- returns %>%
+   filter(party %in% c("L", "C")) %>%
+   # make winning unconditional
+   mutate(win_fut = ifelse(is.na(win_fut), 0, win_fut)) %>%
+   filter(unopposed == 0 | is.na(unopposed)) %>%
+   filter(
+     patronal == 0,
+     is_ire_val == TRUE,
+     mp_switch_between == FALSE
+   ) %>%
+   group_by(year, election_id) %>%
+   mutate(
+     votes_pct = votes / sum(votes),
+     thres = max(votes_pct[winner == 0]) +
+       (abs(max(votes_pct[winner == 0] - min(votes_pct[winner == 1])) / 2)),
+     running = votes_pct - thres
+   ) %>%
+   # Drop obs with no competition / not enough candidates to calc margin
+   filter(running != -Inf & running != Inf) %>%
+   group_by(name) %>%
+   ungroup()
There were 50 or more warnings (use warnings() to see the first 50)
> 
> # Define intervals
> unique_years <- substr(ge_dates, 1, 4) %>% as.numeric()
> split <- which(unique_years == "1880")
> unique_years_old <- unique_years[1:(split - 1)]
> unique_years_new <- unique_years[split:length(unique_years)]
> 
> unique1 <- unique_years[unique_years < 1831]
> unique2 <- unique_years[unique_years > 1831 & unique_years < 1880]
> unique3 <- unique_years[unique_years >= 1885]
> 
> inter_1 <- create_intervals(unique1, 5)
> inter_2 <- create_intervals(unique2, 5)
> inter_3 <- create_intervals(unique3, 5)
> 
> inter <- c(inter_1, inter_2, inter_3)
> 
> ## ----
> ## RUN RD
> ## ----
> 
> results <- map_dfr(inter[1:13], ~ estimate_rd(.x), .id = "interval") %>%
+   filter(Outcome %in% c("Running in t+1", "Winning in t+1"))
> 
> results_second <- map_dfr(inter[1:13], ~ estimate_rd(.x, poly = 2), .id = "interval") %>%
+   filter(Outcome %in% c("Running in t+1", "Winning in t+1"))
> 
> ## ----
> ## REPORT RESULTS
> ## ----
> 
> plot_rd <- ggplot(results, aes(interval, estimate)) +
+   geom_point(aes(colour = Outcome),
+     size = 3,
+     position = position_dodge(1)
+   ) +
+   geom_errorbar(aes(
+     ymin = ci_lower,
+     ymax = ci_upper,
+     colour = Outcome
+   ),
+   width = 0.2,
+   position = position_dodge(1)
+   ) +
+   geom_vline(xintercept = c(2.5, 7.5), lty = "dotted") +
+   geom_hline(yintercept = 0, colour = "grey70") +
+   scale_colour_viridis_d(end = 0.7) +
+   scale_y_continuous(breaks = seq(-1, 0.5, by = 0.25)) +
+   theme_tn() +
+   facet_wrap(. ~ Outcome) +
+   labs(x = "Year Interval", y = "Coefficient") +
+   theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
> 
> ggsave(plot_rd,
+   file = "output/figures/rd_updated_ppr.pdf",
+   width = 7,
+   height = 4,
+   device = cairo_pdf
+ )
> 
> # Plot with second-order polynomials (Figure 17)
> plot_rd2 <- ggplot(results_second, aes(interval, estimate)) +
+   geom_point(aes(colour = Outcome),
+     size = 3,
+     position = position_dodge(1)
+   ) +
+   geom_errorbar(aes(
+     ymin = ci_lower,
+     ymax = ci_upper,
+     colour = Outcome
+   ),
+   width = 0.2,
+   position = position_dodge(1)
+   ) +
+   geom_vline(xintercept = c(2.5, 7.5), lty = "dotted") +
+   geom_hline(yintercept = 0, colour = "grey70") +
+   scale_colour_viridis_d(end = 0.7) +
+   scale_y_continuous(breaks = seq(-1, 0.5, by = 0.25)) +
+   theme_tn() +
+   facet_wrap(. ~ Outcome) +
+   labs(x = "Year Interval", y = "Coefficient") +
+   theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
> 
> ggsave(plot_rd2,
+   file = "output/figures/rd_updated_ppr_sq.pdf",
+   width = 7,
+   height = 4,
+   device = cairo_pdf
+ )
> 
> # Report results in table (Table 4)
> rd_tab <- results %>%
+   select(Outcome, interval, estimate, stderr, obs, bwl) %>%
+   rename(
+     Interval = interval,
+     Estimate = estimate,
+     SE = stderr,
+     N = obs,
+     BW = bwl
+   ) %>%
+   arrange(Outcome)
> 
> rd_tab_tex <- kable(rd_tab,
+   "latex",
+   caption = "Regression Discontinuity Estimates. \\label{tab:rd_est}",
+   booktabs = TRUE,
+   linesep = "",
+   digits = 2
+ ) %>%
+   footnote(
+     threeparttable = TRUE,
+     general_title = "",
+     fixed_small_size = FALSE,
+     footnote_as_chunk = TRUE,
+     general = c("All estimates are with robust standard errors. The estimates report the effect of barely winning the election at the threshold on the reported outcome.")
+   ) %>%
+   row_spec(13, extra_latex_after = "\\midrule")
> # row_spec(8, extra_latex_after = '\\midrule')
> # str_replace_all(fixed("\\textbackslash{}"), "\\") %>%
> # str_replace_all(fixed("\\$"), "$") %>%
> cat(rd_tab_tex, file = "output/tables/models_rd.tex")
> 
> # RUN RD BY YEAR ------
> 
> unique_list <- map(unique_years, ~ rep(.x, times = 2))
> 
> # Catch years where estimation not possible...
> rd_list <- list()
> for (i in 5:length(unique_list)) {
+   print(i)
+   rd_list[[i - 4]] <- tryCatch(
+     estimate_rd(unique_list[[i]]) %>%
+       mutate(year = unique_list[[i]][1]) %>%
+       filter(Outcome %in% c("Running in t+1", "Winning in t+1")),
+     error = function(x) NA
+   )
+ }
[1] 5
[1] 6
[1] "Not enough observations to perform bandwidth calculations. Estimates computed using entire sample"
[1] 7
[1] 8
[1] 9
[1] 10
[1] 11
[1] 12
[1] 13
[1] 14
[1] 15
[1] 16
[1] 17
[1] 18
[1] 19
[1] 20
[1] 21
[1] 22
[1] 23
[1] 24
[1] 25
[1] 26
[1] 27
[1] 28
[1] 29
[1] 30
[1] 31
[1] 32
[1] 33
[1] 34
> 
> rd_list <- rd_list[!is.na(rd_list)]
> rd_df <- do.call(rbind, rd_list) %>%
+   filter(!year %in% c(1831, 1865, 1880, 1924, 1929))
> 
> plot_rdyr <- ggplot(rd_df, aes(year, estimate)) +
+   geom_hline(yintercept = 0, lty = "dotted") +
+   geom_point(aes(colour = Outcome)) +
+   geom_vline(xintercept = c(1831.5, 1867, 1884), lty = "dashed") +
+   geom_errorbar(aes(
+     ymin = ci_lower,
+     ymax = ci_upper,
+     colour = Outcome
+   ),
+   alpha = 0.4
+   ) +
+   geom_smooth(
+     method = "loess",
+     se = FALSE,
+     aes(colour = Outcome)
+   ) +
+   facet_wrap(~Outcome) +
+   labs(x = "Year", y = "Estimate") +
+   theme_tn()
> ggsave(plot_rdyr,
+   file = "output/figures/rd_by_year.pdf",
+   device = cairo_pdf, width = 8, height = 3
+ )
`geom_smooth()` using formula 'y ~ x'
> 
> # Plot
> rd_by_year_tbl <- rd_df %>%
+   arrange(Outcome, year) %>%
+   select(Outcome, year, estimate, stderr) %>%
+   pivot_wider(names_from = Outcome, values_from = estimate:stderr)
> rd_by_year_tbl <- rd_by_year_tbl[, c(1, 2, 4, 3, 5)]
> names(rd_by_year_tbl) <- c("Year", "Estimate", "SE", "Estimate", "SE")
> 
> # Table
> rd_mod <- kable(rd_by_year_tbl,
+   booktabs = TRUE,
+   digits = 2,
+   caption = "\\textbf{RD Estimates Fitted On Each Election Year Separately}. With Robust Standard Errors.",
+   "latex"
+ ) %>%
+   add_header_above(c(" " = 1, "Running Again" = 2, "Winning" = 2)) %>%
+   kable_styling(latex_options = "hold_position")
> cat(rd_mod, file = "output/tables/rd_by_year.tex")
> 
> # DENSITY CHECK -----------------------
> 
> # Density plot by year (check sorting)
> rd_density <- ggplot(rdd_df %>% filter(abs(running) < 0.05, year < 1924)) +
+   geom_density(aes(x = running)) +
+   facet_wrap(. ~ year) +
+   geom_vline(xintercept = 0) +
+   theme_tn() +
+   scale_x_continuous(breaks = c(-0.05, 0, 0.05)) +
+   labs(x = "Vote Share Margin", y = "Density")
> ggsave(rd_density,
+   file = "output/figures/rd_sorting.pdf",
+   device = cairo_pdf, width = 8, height = 6
+ )
> 
> proc.time()
   user  system elapsed 
 21.703   0.655  23.008 
