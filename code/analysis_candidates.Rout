
R version 4.1.0 (2021-05-18) -- "Camp Pontanezen"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # DEPENDENCIES
> library(tidyverse)
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──
✔ ggplot2 3.3.5     ✔ purrr   0.3.4
✔ tibble  3.1.5     ✔ dplyr   1.0.7
✔ tidyr   1.1.4     ✔ stringr 1.4.0
✔ readr   2.0.2     ✔ forcats 0.5.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
> library(rio)
> library(viridis)
Loading required package: viridisLite
> library(lfe)
Loading required package: Matrix

Attaching package: ‘Matrix’

The following objects are masked from ‘package:tidyr’:

    expand, pack, unpack

> library(broom)
> # library(texreg)
> library(devtools)
Loading required package: usethis
> source_url("https://raw.githubusercontent.com/tobiasnowacki/RTemplates/master/plottheme.R")
ℹ SHA-1 hash of file is 24d50dc41518460caa7dd1e4f46697f9eb053e29
Registering fonts with R
> source("code/0_functions.R")

Attaching package: ‘lubridate’

The following objects are masked from ‘package:base’:

    date, intersect, setdiff, union

ℹ SHA-1 hash of file is 24d50dc41518460caa7dd1e4f46697f9eb053e29
> 
> ###
> ### LOAD DATA
> ###
> 
> df <- import("output/mod_data/candidates_cabinet.csv")
> 
> ###
> ### AGGREGATE DATA
> ###
> 
> attempts <- df %>%
+   filter(year < 1911, year >= 1802, mp_switch_between == FALSE)
> 
> ###
> ### FIRST ATTEMPT RUNNING
> ###
> 
> # Only get the first time a candidate is running
> firstc <- attempts %>%
+   filter(patronal == 0, is_ire_val == TRUE) %>%
+   filter(attempt == 1) %>%
+   filter(party %in% c("C", "L")) %>%
+   ungroup()
> 
> # Making sure that we only run this on constituencies that are not patronal
> table(firstc$patronal, !is.na(firstc$fitted4))
   
    FALSE TRUE
  0  1059 4785
> table(firstc$year, !is.na(firstc$fitted4))
      
       FALSE TRUE
  1802   132    0
  1806     8   43
  1807     4   27
  1812     3   40
  1818    11   58
  1820     3   33
  1826     3   73
  1830     7   61
  1831     0   34
  1832   302  172
  1835     0  181
  1837     0  199
  1841     0  188
  1847     0  208
  1852     0  238
  1857     0  180
  1859     0  126
  1865     2  224
  1868    54  228
  1874     1  239
  1880     0  266
  1885   379  128
  1886    42  146
  1892    17  386
  1895    13  247
  1900     8  279
  1906    28  428
  1910    42  353
> table(firstc$year, firstc$patronal)
      
         0
  1802 132
  1806  51
  1807  31
  1812  43
  1818  69
  1820  36
  1826  76
  1830  68
  1831  34
  1832 474
  1835 181
  1837 199
  1841 188
  1847 208
  1852 238
  1857 180
  1859 126
  1865 226
  1868 282
  1874 240
  1880 266
  1885 507
  1886 188
  1892 403
  1895 260
  1900 287
  1906 456
  1910 395
> 
> # Get mean c_hat by year
> means <- firstc %>%
+   group_by(constituency.name) %>%
+   filter(patronal == 0, is_ire_val == TRUE) %>%
+   arrange(year) %>%
+   mutate(fit_lg = lag(fitted4_ire)) %>%
+   ungroup() %>%
+   group_by(year, party) %>%
+   summarise(
+     mean_fit = mean(fitted4_ire, na.rm = TRUE),
+     mean_unopp = mean(unopposed_lg, na.rm = TRUE),
+     mean_win = mean(winner),
+     mean_run_again_loser = mean(again[winner == 0], na.rm = TRUE),
+     mean_run_again_winner = mean(again[winner == 1], na.rm = TRUE)
+   ) %>%
+   mutate(lgrp = case_when(
+     year < 1832 ~ "1",
+     year %in% 1832:1866 ~ "2",
+     year %in% 1867:1885 ~ "3",
+     year > 1885 ~ "4",
+     TRUE ~ "5"
+   )) %>%
+   filter(party %in% c("C", "L")) %>%
+   filter(year != 1832 & year != 1885)
`summarise()` has grouped output by 'year'. You can override using the `.groups` argument.
> 
> # Get winning proportion across parties for new candidates
> means_cross_party <- firstc %>%
+   group_by(constituency.name) %>%
+   filter(patronal == 0) %>%
+   arrange(year) %>%
+   ungroup() %>%
+   group_by(year) %>%
+   summarise(
+     mean_win = mean(winner),
+     win_low = get_ci(winner, "lower"),
+     win_high = get_ci(winner, "upper"),
+     sd_win = sd(winner)
+   ) %>%
+   mutate(lgrp = case_when(
+     year <= 1831 ~ "1",
+     year %in% 1832:1867 ~ "2",
+     year %in% 1868:1884 ~ "3",
+     year >= 1885 ~ "4",
+     TRUE ~ "5"
+   )) %>%
+   filter(year != 1832 & year != 1885)
> 
> # Calculate the difference in score between parties
> diff_by_year <- firstc %>%
+   group_by(constituency.name) %>%
+   filter(patronal == 0, is_ire_val == TRUE, year > 1802) %>%
+   arrange(year) %>%
+   mutate(fit_lg = lag(fitted4)) %>%
+   ungroup() %>%
+   group_by(year) %>%
+   summarise(
+     mean_fit_diff = mean(fitted4_ire[party == "L"], na.rm = TRUE) - mean(fitted4_ire[party == "C"], na.rm = TRUE),
+     mean_fit_diff_low = t.test(fitted4_ire[party == "L"], fitted4_ire[party == "C"], conf = 0.95)$conf[1],
+     mean_fit_diff_high = t.test(fitted4_ire[party == "L"], fitted4_ire[party == "C"], conf = 0.95)$conf[2]
+   ) %>%
+   mutate(lgrp = case_when(
+     year <= 1831 ~ "1",
+     year %in% 1832:1867 ~ "2",
+     year %in% 1868:1884 ~ "3",
+     year >= 1885 ~ "4",
+     TRUE ~ "5"
+   )) %>%
+   filter(year != 1832 & year != 1885)
> 
> # Proportion of *new* candidates winning (across parties)
> plot_newcross <- ggplot(means_cross_party, aes(year, mean_win)) +
+   geom_vline(xintercept = c(1832, 1867, 1885), lty = "dashed") +
+   geom_ribbon(aes(
+     ymin = win_low,
+     ymax = win_high,
+     group = lgrp
+   ),
+   alpha = 0.3
+   ) +
+   geom_point() +
+   geom_line(aes(group = lgrp)) +
+   scale_colour_manual(values = c("blue", "orange")) +
+   labs(x = "Year", y = "Proportion of New Candidates Winning") +
+   theme_tn()
> 
> ggsave("output/figures/new_win.pdf",
+   width = 4, height = 4,
+   device = cairo_pdf
+ )
> 
> # Summarise difference between parties, by year.
> plot_diff <- ggplot(diff_by_year, aes(year, mean_fit_diff)) +
+   geom_hline(yintercept = 0, colour = "grey") +
+   geom_ribbon(aes(
+     ymin = mean_fit_diff_low,
+     ymax = mean_fit_diff_high,
+     group = lgrp
+   ),
+   alpha = 0.3
+   ) +
+   geom_line(aes(group = lgrp)) +
+   geom_point(shape = 21) +
+   geom_vline(xintercept = c(1832, 1867, 1885), lty = "dashed") +
+   labs(x = "Year", y = expression(paste("Party Difference in ", hat(C)[t]))) +
+   theme_tn()
> ggsave(plot_diff,
+   file = "output/figures/new_partydiff.pdf",
+   width = 4,
+   height = 4,
+   device = cairo_pdf
+ )
> 
> proc.time()
   user  system elapsed 
  3.569   0.333   4.047 
